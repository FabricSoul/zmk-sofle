#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  //  600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&mt { flavor = "tap-preferred"; };

&lt {
};

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&trans         &trans          &trans           &trans            &trans              &trans     &kp UP_ARROW     &trans           &trans               &trans             &trans            &trans           &trans
&kp TAB        &kp SEMI        &kp COMMA        &kp PERIOD        &lt 2 P             &kp Y      &kp DOWN_ARROW   &kp F            &kp G                &kp C              &kp R             &kp L            &kp SLASH
&kp ESCAPE     &mt LEFT_ALT A  &mt LEFT_META O  &mt LEFT_SHIFT E  &mt LEFT_CONTROL U  &lt 2 I    &kp LEFT_ARROW   &lt 2 D          &mt RIGHT_CONTROL H  &mt RIGHT_SHIFT T  &mt RIGHT_META N  &mt RIGHT_ALT S  &kp MINUS
&kp BACKSLASH  &kp SQT         &kp Q            &kp J             &kp K               &kp X      &kp RIGHT_ARROW  &kp B            &kp M                &kp W              &kp V             &kp Z            &kp PIPE
&kp C_MUTE     &kp LEFT_GUI    &mo 2            &kp ESCAPE        &kp SPACE           &kp TAB    &kp ENTER        &lt 4 BACKSPACE  &lt 5 RETURN         &lt 6 DELETE       &kp LEFT_ALT      &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "base";
        };

        gase {
            display-name = "base";
            bindings = <
&trans         &trans           &trans          &trans            &trans              &trans              &kp UP_ARROW     &trans   &trans               &trans             &trans           &trans            &trans
&kp TAB        &kp B            &kp L           &kp D             &lt 2 C             &kp V               &kp DOWN_ARROW   &kp J    &kp Y                &kp O              &kp U            &kp SINGLE_QUOTE  &kp SLASH
&kp ESCAPE     &mt LEFT_META N  &mt LEFT_ALT R  &mt LEFT_SHIFT T  &mt LEFT_CONTROL S  &lt 2 G             &kp LEFT_ARROW   &lt 2 P  &mt RIGHT_CONTROL H  &mt RIGHT_SHIFT A  &mt RIGHT_ALT E  &mt RIGHT_META I  &kp MINUS
&kp BACKSLASH  &kp X            &kp Q           &kp M             &kp W               &kp Z               &kp RIGHT_ARROW  &kp K    &kp F                &kp SEMICOLON      &kp COMMA        &kp PERIOD        &kp PIPE
&kp C_MUTE     &kp LEFT_GUI     &mo 2           &kp SPACE         &kp LEFT_SHIFT      &kp LEFT_CONTROL    &kp ENTER        &mo 0    &kp BACKSPACE        &kp ENTER          &kp LEFT_ALT     &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        keyboard_and_mouse {
            bindings = <
&trans      &trans           &trans          &trans           &trans           &trans             &mmv MOVE_UP     &trans           &trans           &trans    &trans       &trans     &trans
&trans      &trans           &mkp LCLK       &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &trans           &kp UP    &kp AT_SIGN  &kp CARET  &trans
&trans      &trans           &trans          &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN  &kp RIGHT    &trans     &to 0
&trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &trans    &trans       &trans     &to 0
&kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &tog 0           &tog 1           &trans    &trans       &trans
            >;

            display-name = "kbd & mouse";
            sensor-bindings = <&scroll_encoder>;
        };

        system {
            bindings = <
&trans  &trans        &trans          &trans        &trans        &trans          &mmv MOVE_UP     &trans           &trans          &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_DOWN   &trans           &trans          &trans  &trans  &trans  &trans
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_LEFT   &trans           &trans          &trans  &trans  &trans  &trans
&trans  &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_RIGHT  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &trans  &trans  &trans  &trans
&trans  &sys_reset    &bootloader     &trans        &trans        &trans          &mkp LCLK        &trans           &trans          &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "system";
        };

        symbol {
            bindings = <
&trans         &trans        &trans        &trans         &trans        &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp LS(TILDE)  &kp LS(STAR)  &kp LS(EXCL)  &kp LS(PRCNT)  &kp LS(AT)    &kp LS(CARET)    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp LS(DLLR)   &kp LS(PLUS)  &kp LBKT      &kp LS(LBRC)   &kp LS(LPAR)  &kp EQUAL        &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp LS(POUND)  &kp GRAVE     &kp RBKT      &kp LS(RBRC)   &kp LS(RPAR)  &kp LS(AMPS)     &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans         &trans        &trans        &trans         &trans        &trans           &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        num {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N7  &kp N8  &kp N9  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &kp N0    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        fn {
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
